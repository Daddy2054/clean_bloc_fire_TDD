// Mocks generated by Mockito 5.4.3 from annotations
// in clean_bloc_firebase/test/src/features/chat/domain/use_cases/send_message_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:clean_bloc_firebase/src/features/chat/domain/entities/chat.dart'
    as _i5;
import 'package:clean_bloc_firebase/src/features/chat/domain/entities/message.dart'
    as _i6;
import 'package:clean_bloc_firebase/src/features/chat/domain/repositories/chat_repository.dart'
    as _i2;
import 'package:fpdart/fpdart.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ChatRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatRepository extends _i1.Mock implements _i2.ChatRepository {
  MockChatRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.Either<Exception, List<_i5.Chat>>> streamChats(
          {required String? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamChats,
          [],
          {#userId: userId},
        ),
        returnValue: _i3.Stream<_i4.Either<Exception, List<_i5.Chat>>>.empty(),
      ) as _i3.Stream<_i4.Either<Exception, List<_i5.Chat>>>);

  @override
  _i3.Stream<_i4.Either<Exception, _i5.Chat>> streamChat(
          {required String? chatId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamChat,
          [],
          {#chatId: chatId},
        ),
        returnValue: _i3.Stream<_i4.Either<Exception, _i5.Chat>>.empty(),
      ) as _i3.Stream<_i4.Either<Exception, _i5.Chat>>);

  @override
  _i3.Future<_i4.Either<Exception, void>> addMessageToChat({
    required String? chatId,
    required _i6.Message? message,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMessageToChat,
          [],
          {
            #chatId: chatId,
            #message: message,
          },
        ),
        returnValue: _i3.Future<_i4.Either<Exception, void>>.value(
            _i7.dummyValue<_i4.Either<Exception, void>>(
          this,
          Invocation.method(
            #addMessageToChat,
            [],
            {
              #chatId: chatId,
              #message: message,
            },
          ),
        )),
      ) as _i3.Future<_i4.Either<Exception, void>>);
}
